buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}")
		classpath "com.google.protobuf:protobuf-gradle-plugin:$protobuf_gradle_plugin_version"
		classpath("se.transmode.gradle:gradle-docker:$transmode_docker_gradle_plugin_version")
//		classpath "com.bmuschko:gradle-docker-plugin:3.0.8"
//		classpath "org.springframework:springloaded:1.2.7.RELEASE"
//		classpath 'nu.studer:gradle-jooq-plugin:2.0.7'
	}
}

apply plugin: "base"


allprojects {
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'kotlin'
	apply plugin: 'kotlin-spring'
	apply plugin: 'eclipse'
//	apply plugin: 'eclipse-wtp'
	apply plugin: 'idea'

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	group project_group
	version = project_version
	sourceCompatibility = java_version
	targetCompatibility = java_version
//    buildDir = 'build'
	compileKotlin {
		kotlinOptions.jvmTarget = java_version
	}
	compileTestKotlin {
		kotlinOptions.jvmTarget = java_version
	}
	idea {
		module {
			downloadJavadoc = true
			downloadSources = true
		}
	}
	eclipse {
		classpath {
			downloadJavadoc = true
			downloadSources = true
		}
	}

	task printProjectName {
		doLast{
			println "${project.name}"
		}
	}
	task "create-dirs" {
		doLast {
			sourceSets*.java.srcDirs*.each { it.mkdirs() }
			sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
			sourceSets*.resources.srcDirs*.each { it.mkdirs() }
			sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
			sourceSets*.scala.srcDirs*.each { it.mkdirs() }
		}
	}

	repositories {
		mavenCentral()
		jcenter()
		maven {
			url  "https://dl.bintray.com/archmagece/jvm-repo"
		}
		mavenLocal()
	}

	dependencies {
		compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlin_version}")
		compile("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
		
		compile "org.codehaus.groovy:groovy-all:$groovy_version"
		
		compileOnly "org.projectlombok:lombok:$lombok_version"
		testCompileOnly "org.projectlombok:lombok:$lombok_version"
	}

	task stage(dependsOn: ["build"])
	build.mustRunAfter clean
}

subprojects {
	apply plugin: "org.springframework.boot"

	dependencies {
//		runtime("org.springframework.boot:spring-boot-devtools")
//		compile('org.springframework.session:spring-session')
//		compileOnly("org.springframework.boot:spring-boot-configuration-processor")

		//기타 필수
//		compile group: "com.google.guava", name: "guava", version: guava_version
//		compile group: "org.apache.commons", name: "commons-lang3", version: commons_lang3_version
//		compile group: "commons-collections", name: "commons-collections", version: commons_collections_version

		//test
		testCompile("junit:junit")
		testCompile("org.springframework.boot:spring-boot-starter-test")
		testCompile("org.springframework.security:spring-security-test")
		testCompile("com.jayway.jsonpath:json-path")

		//logging
//		compile "org.slf4j:slf4j-api:$slf4j_version"
//		runtime "org.slf4j:jcl-over-slf4j:$slf4j_version"
//		compile "ch.qos.logback:logback-classic:$logback_version"
//		compile "ch.qos.logback:logback-core:$logback_version"
	}

	clean {
		delete "out"
	}
}
